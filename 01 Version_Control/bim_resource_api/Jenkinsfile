pipeline {
    agent any
    stages {
        stage ('Import YAML manifest') {
            steps {
                script {
                    manifest = readYaml (file: 'build.yaml')
					appVersion = manifest.app.version + '-' + "${env.BUILD_NUMBER}".padLeft(6,"0")
                }
            }
        }
        stage('Build') {
            steps {
                bitbucketStatusNotify buildState: 'INPROGRESS'
                dir(manifest.app.solution_folder.toString()) {
                    sh 'dotnet restore'
                    sh 'dotnet clean'
                    sh 'dotnet build  /p:version=' + appVersion + ' -c Release'
                }
            }
        }
        stage('Unit Tests') {
            steps {
                dir(manifest.app.solution_folder.toString()) {
                    sh 'dotnet test -c Release --no-build'
                }
            }
        }
        stage('SonarQube') {
            environment {
                scannerHome = tool 'Sonar-Dotnet2'
                app_name = manifest.app.name.toString()
				app_version = "${appVersion}"
            }
            when {
                branch "dev"
            }
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    dir(manifest.app.solution_folder.toString()) {
                        sh '''
                            dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:"${app_name}"
                            dotnet build  /p:version="${app_version}" -c Release
                            dotnet ${scannerHome}/SonarScanner.MSBuild.dll end
                        '''
                    }
                }
            }
        }
        stage('Docker Build') {
            environment {
                escaped_branch = escapedBranch("${env.GIT_BRANCH}")
            }
            steps {
                withCredentials([azureServicePrincipal(manifest.azure.credentials.acr.toString())]) {
                    dir(manifest.app.project_folder.toString()) {
                        sh 'dotnet publish -c Release -o publish --no-build'
                        sh 'docker login ${DOCKER_REPO_URL} -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET}'
                    
                        script {
                            if(env.GIT_BRANCH == 'dev'){  
                                sh "docker build -t ${DOCKER_REPO_URL}/${SERVICES_ACR_PREFIX}/${manifest.config.helm.name.toString()}:${env.escaped_branch}.${appVersion} ."
                            } else {
								sh "docker build -t ${DOCKER_REPO_URL}/${SERVICES_ACR_PREFIX}/${manifest.config.helm.name.toString()}:${env.escaped_branch} ."
							}                            
                            sh "docker push ${DOCKER_REPO_URL}/${SERVICES_ACR_PREFIX}/${manifest.config.helm.name.toString()}"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            bitbucketStatusNotify buildState: 'SUCCESSFUL'
			script {
				if(env.GIT_BRANCH == 'dev'){
					// in the downstream job BIM_API/bim-resource-api-deploy-dev Jenkins GUI side, select "configuration" - "General" - "This project is parameterized", 
					// add a String Parameter: Name: Input_Build_Number, Default Value: Null, Description: Upstream project build number
					build job: 'BIM_API/bim-resource-api-deploy-dev', propagate:false, parameters: [[$class: 'StringParameterValue', name: 'Input_Build_Number', value: env.BUILD_NUMBER]]
				}
			}
        }
        failure {
            bitbucketStatusNotify buildState: 'FAILED'
        }
    }
}

String escapedBranch(String branch) {
    return branch.replace("/", "_") 
}